#!/home/caoy7/anaconda2/envs/vince/bin/python
#--coding:utf-8 --
"""
showAggViewpoints.py
Show the aggregation plot for view points, which was introduced in Ma & Cao's NCB paper, suitable for H3K27ac HiChIP like data. 
"""

__date__ = "2024-03-19"
__modified__ = ""
__email__ = "caoyaqiang0410@gmail.com"

#sys library
import os
import json
import argparse
from glob import glob
from argparse import RawTextHelpFormatter

#3rd library
import pylab
import pandas as pd
import numpy as np
from tqdm import tqdm
from joblib import Parallel, delayed

#cLoops2
from cLoops2.agg import getAViewPoints
from cLoops2.settings import *


def help():
    """
    Create the command line interface for the script.
    """
    description = """
        Plot the aggregation results for view points with assigned range of upstream and downstream.

        Example:
        showAggVPs.py -f h3k27ac_peaks.bed -d h3k27ac_hichip -o hichip_h3k27ac_vps
        """
    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=RawTextHelpFormatter)
    parser.add_argument(
        "-f",
        dest="bedf",
        required=True,
        type=str,
        help="View points (such as peaks) file in .bed format.")
    parser.add_argument(
        "-d",
        dest="predir",
        required=True,
        type=str,
        help="The data directory generated by cLoops2 pre for the sample.")
    parser.add_argument("-o",
                        dest="output",
                        required=True,
                        type=str,
                        help="Output prefix.")
    parser.add_argument(
        "-up",
        dest="viewPointUp",
        required=False,
        default=100000,
        type=int,
        help=
        "The upstream regions included for the aggreaged view points analysis.\n"\
        "Default is 100000 bp."
    )
    parser.add_argument(
        "-down",
        dest="viewPointDown",
        required=False,
        default=100000,
        type=int,
        help=
        "The downstream regions included for the aggreaged view points analysis.\n"\
        "Default is 100000 bp."
    )
    parser.add_argument(
        "-bs",
        dest="bs",
        required=False,
        default=1000,
        type=int,
        help=
        "Contact matrix bin size for view points heatmap. Default is 1000 bp. "
    )
    parser.add_argument("-vmin",
                        dest="vmin",
                        required=False,
                        type=str,
                        default=None,
                        help="Minimal scale for the aggregation heatmap.")
    parser.add_argument("-vmax",
                        dest="vmax",
                        required=False,
                        type=str,
                        default=None,
                        help="Maxmal scale for the aggregation heatmap.")
    parser.add_argument(
        "-p",
        dest="cpu",
        required=False,
        type=int,
        default=4,
        help="How many cpus used for quantification, default is 4.")

    op = parser.parse_args()
    return op


def showAggVPs(
        predir,
        viewPointF,
        output,
        upExt=100000,
        downExt=100000,
        bs=1000,
        cpu=1,
        vmin=None,
        vmax=None,
):
    viewPoints = {}
    for line in open(viewPointF):
        line = line.split("\n")[0].split("\t")
        if len(line) < 3:
            continue
        key = line[0] + "-" + line[0]
        if key not in viewPoints:
            viewPoints[key] = []
        line[1] = int(line[1])
        line[2] = int(line[2])
        viewPoints[key].append(line)
    #meta data
    metaf = predir + "/petMeta.json"
    meta = json.loads(open(metaf).read())
    keys = list(meta["data"]["cis"].keys())
    keys = list(set(keys).intersection(set(viewPoints.keys())))
    #get the data
    ds = Parallel(n_jobs=cpu,
                  backend="multiprocessing")(delayed(getAViewPoints)(
                      key,
                      meta["data"]["cis"][key]["ixy"],
                      viewPoints[key],
                      upExt=upExt,
                      downExt=downExt,
                      bs=bs,
                  ) for key in keys)
    #re-complie results
    #matrix
    mat = np.concatenate([d[0] for d in ds if d[0] is not None], axis=0)
    np.savez(output + "_aggViewPoints.npz", mat)

    #plot the results
    n = mat.shape[0]
    #take care of colormap
    center = None

    #get the enrichment score, defined as viewpoint all interactions / mean( upstream&downstream)
    p = int(upExt / bs)
    es = []
    for i in range(mat.shape[0]):
        nmat = mat[i]
        ts = []
        for j in range(nmat.shape[0]):
            ts.append(nmat[:j, j].sum() + nmat[j, j:].sum())
        if np.sum(ts) == 0:
            continue
        es.append(ts[p] / np.mean(ts))
    es = np.mean(es)

    mat = np.mean(mat, axis=0)
    mat = mat[0:105, 95:]

    mat = np.log2(mat + 1)
    mat = np.log2(mat + 1)
    mat = np.log2(mat + 1)
    cmap = cmaps["red"]
    if vmin is None:
        vmin = 0

    fig = pylab.figure(figsize=(2, 2.5))  #the extra 1, 0.5 for 1D signal,
    hr = [2.4, 0.1]
    gs = mpl.gridspec.GridSpec(2, 1, height_ratios=hr)

    title = "%s view points; ES: %.3f" % (n, np.mean(es))
    fig.suptitle(title, fontsize=8)
    ax = fig.add_subplot(gs[-2])
    cax = fig.add_subplot(gs[-1])
    sns.heatmap(mat,
                xticklabels=False,
                yticklabels=False,
                square=True,
                ax=ax,
                cmap=cmap,
                cbar_ax=cax,
                linewidths=0,
                vmin=vmin,
                vmax=vmax,
                center=center,
                cbar_kws={
                    'orientation': 'horizontal',
                    "shrink": 0.2,
                })
    ax.axvline(x=ax.get_xlim()[0], color="k", linewidth=2)
    ax.axvline(x=ax.get_xlim()[1], color="k", linewidth=2)
    ax.axhline(y=ax.get_ylim()[0], color="k", linewidth=2)
    ax.axhline(y=ax.get_ylim()[1], color="k", linewidth=2)
    pylab.savefig(f"{output}_aggViewPoints.pdf")


def main():
    op = help()
    showAggVPs(op.predir,
               op.bedf,
               op.output,
               upExt=op.viewPointUp,
               downExt=op.viewPointDown,
               bs=op.bs,
               cpu=op.cpu,
               vmin=op.vmin,
               vmax=op.vmax)


if __name__ == "__main__":
    main()
